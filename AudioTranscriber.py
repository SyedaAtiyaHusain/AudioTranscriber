"""
Title:Audio Transcriber
Developed  by : Syeda Atiya Husain and Ashish Kore
Language: Python
Requirement:
            Python version: Python 3 or later
            Libraries:1) Pydub
                      2) speech_recognition
                      3) os
"""

"""
This code is to convert speech into text(using SpeechRecognition Library)

Caution: The default key provided by SpeechRecognition is for testing purposes only, and Google may revoke it at any time.
It is not a good idea to use the Google Web Speech API in production.
Even with a valid API key, you’ll be limited to only 50 requests per day, and there is no way to raise this quota.
Fortunately,SpeechRecognition’s interface is nearly identical for each API,
so what you learn today will be easy to translate to a real-world project.
"""

#Importing necessary libraries
from pydub import AudioSegment
import speech_recognition as sr
import os


def transcribe(recording):
    
    """ This function is defined so as to convert the audio file into text. It takes file path as argument."""
    
    tran_list=list()
    sound = AudioSegment.from_wav(recording)                    #loading audio data
    sound = sound.set_channels(1)                               #converting stereo audio file into monolog audio file
    sound.export("one_chan.wav", format="wav")                  #Exporting monolog audio file           

    sound = AudioSegment.from_file("one_chan.wav")              #loading monolog audio file 
                                                                #This algorithm is splitting the audio on the basis of 15 seconds.
    l=len(sound)
    l2=l
    Audio_Parts_List=list()                                      #list to store splitted audio objects 
    m1,m2=(0,15000)
    while True:
        Audio_Parts_List.append(sound[m1:m2])
        l2=l2-15000
        m1=m2
        if l2>15000:
            m2=m2+15000
        else:
            Audio_Parts_List.append(sound[m1:])
            break


                                                     #Iterating through the audio objects list and exporting each audio to the system
    for i in range(len(Audio_Parts_List)):
        path=r'output_part{}.wav'.format(i)
        Audio_Parts_List[i].export(path, format="wav")


                                                #Iterating through the number of audio generated through the above code and
                                               #transcribing them using recognize_google function present in SpeechRecognition library    
    for k in range(3):  
        string=""
        for i in range(len(Audio_Parts_List)):
            r=sr.Recognizer()
            h = sr.AudioFile(f'output_part{i}.wav')
            with h as source:
                audio = r.record(source)
            string=string+" "+r.recognize_google(audio)
        tran_list.append(string)

    if len(tran_list[0])>len(tran_list[1]) and len(tran_list[0])>len(tran_list[2]):
        final_text=tran_list[0]
    elif len(tran_list[1])>len(tran_list[2]) and len(tran_list[1])>len(tran_list[0]):
        final_text=tran_list[1]
    else:
        final_text=tran_list[2]

                                                                              #Removing audio files generated by the code.
    os.remove("one_chan.wav")
    for i in range(len(Audio_Parts_List)):
        os.remove(f"output_part{i}.wav")
        
    return final_text                                                         # returning the transcript.  
        
